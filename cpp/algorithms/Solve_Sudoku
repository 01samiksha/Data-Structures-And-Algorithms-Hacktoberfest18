#include<iostream>
#define N 9
using namespace std;

bool inRow(int grid[N][N],int row,int num){
    for(int i=0;i<N;i++){
        if(grid[row][i] == num) return false;
    }
    return true;
}
bool inCol(int grid[N][N],int col,int num){
    for(int i=0;i<N;i++){
        if(grid[i][col] == num) return false;
    }
    return true;
}
bool inBox(int grid[N][N],int row,int col,int num){
    for(int i=0;i<3;++i){
        for(int j=0;j<3;++j){
            if(grid[i + row][j + col] == num) return false;
        }
    }
    return true;
}
bool isSafe(int grid[N][N],int row,int col,int num){
    return (inRow(grid,row,num) && inCol(grid,col,num) && inBox(grid,row - row%3,col - col%3,num));
}

bool findEmpty(int grid[N][N],int &row,int &col){
    for(row = 0;row<N;++row){
        for(col=0;col<N;++col){
            if(grid[row][col] == 0) return true;
        }
    }
    return false;
}

bool solveSudo(int grid[N][N]){
    int row,col;
    if(!findEmpty(grid,row,col)) return true;
    for(int num = 1;num<=9;++num){
        if(isSafe(grid,row,col,num)){
            grid[row][col] = num;
            if(solveSudo(grid)) return true;
            grid[row][col] = 0;
        }
    }
    return false;
}
void printSol(int grid[][N]){
    for(int i=0;i<N;++i){
        for(int j=0;j<N;++j) cout<<grid[i][j]<<" ";
    }
}

int main() {
	int t;cin>>t;
	for(int i=0;i<t;++i){
	    int grid[N][N];
	    for(int j=0;j<N;++j){
	        for(int i = 0;i<N;++i) cin>>grid[j][i];
	    }
	    if(solveSudo(grid)) {
	        printSol(grid);
	        cout<<endl;
	    }
	    else cout<<-1<<endl;
	    
	}
}
